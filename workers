// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract JobPortal {
    
    address public admin;
    
    struct Applicant {
        uint id;
        string name;
        string skills;
        string availability;
        uint rating;
    }
    
    struct Job {
        uint id;
        string title;
        string description;
        uint salary;
        address employer;
        bool filled;
    }
    
    mapping(uint => Applicant) public applicants;
    uint public nextApplicantId;
    
    mapping(uint => Job) public jobs;
    uint public nextJobId;
    
    mapping(uint => mapping(uint => uint)) public jobApplications; // job id => applicant id => timestamp
    
    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }
    
    constructor() {
        admin = msg.sender;
        nextApplicantId = 1;
        nextJobId = 1;
    }
    
    function addApplicant(string memory _name, string memory _skills, string memory _availability) external onlyAdmin {
        applicants[nextApplicantId] = Applicant(nextApplicantId, _name, _skills, _availability, 0);
        nextApplicantId++;
    }
    
    function getApplicant(uint _applicantId) external view returns (uint, string memory, string memory, string memory, uint) {
        require(_applicantId > 0 && _applicantId < nextApplicantId, "Invalid applicant ID");
        Applicant memory applicant = applicants[_applicantId];
        return (applicant.id, applicant.name, applicant.skills, applicant.availability, applicant.rating);
    }
    
    function addJob(string memory _title, string memory _description, uint _salary) external onlyAdmin {
        jobs[nextJobId] = Job(nextJobId, _title, _description, _salary, msg.sender, false);
        nextJobId++;
    }
    
    function getJob(uint _jobId) external view returns (uint, string memory, string memory, uint, address, bool) {
        require(_jobId > 0 && _jobId < nextJobId, "Invalid job ID");
        Job memory job = jobs[_jobId];
        return (job.id, job.title, job.description, job.salary, job.employer, job.filled);
    }
    
    function applyForJob(uint _jobId, uint _applicantId) external {
        require(_jobId > 0 && _jobId < nextJobId, "Invalid job ID");
        require(_applicantId > 0 && _applicantId < nextApplicantId, "Invalid applicant ID");
        require(jobs[_jobId].filled == false, "Job is already filled");
        
        jobApplications[_jobId][_applicantId] = block.timestamp;
    }
    
    function rateApplicant(uint _applicantId, uint _rating) external onlyAdmin {
        require(_applicantId > 0 && _applicantId < nextApplicantId, "Invalid applicant ID");
        require(_rating >= 1 && _rating <= 5, "Rating must be between 1 and 5");
        
        applicants[_applicantId].rating = _rating;
    }
    
    function getApplicantRating(uint _applicantId) external view returns (uint) {
        require(_applicantId > 0 && _applicantId < nextApplicantId, "Invalid applicant ID");
        return applicants[_applicantId].rating;
    }
}
